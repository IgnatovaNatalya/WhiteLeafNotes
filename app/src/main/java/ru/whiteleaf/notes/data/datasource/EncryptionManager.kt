package ru.whiteleaf.notes.data.datasource

import android.security.keystore.KeyGenParameterSpec
import android.security.keystore.KeyProperties
import android.util.Base64
import java.security.KeyStore
import javax.crypto.Cipher
import javax.crypto.KeyGenerator
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec

class EncryptionManager() {

    private val keyStore: KeyStore = KeyStore.getInstance("AndroidKeyStore").apply { load(null) }

    companion object {
        private const val ENCRYPTION_KEY_SUFFIX = "_enc"
        private const val ACCESS_KEY_SUFFIX = "_access"

        private const val TRANSFORMATION = "AES/CBC/PKCS7Padding"
        private const val IV_SEPARATOR = "|"
    }

    fun createNotebookKeys(notebookKeyAlias: String): Boolean {
        val encryptionKeyCreated = createEncryptionKey("$notebookKeyAlias$ENCRYPTION_KEY_SUFFIX")
        val accessKeyCreated = createAccessKey("$notebookKeyAlias$ACCESS_KEY_SUFFIX")

        return encryptionKeyCreated && accessKeyCreated
    }

    /**
     * –ö–ª—é—á –¥–ª—è –®–ò–§–†–û–í–ê–ù–ò–Ø (–±–µ–∑ –±–∏–æ–º–µ—Ç—Ä–∏–∏)
     */
    private fun createEncryptionKey(keyAlias: String): Boolean = try {
        val keyGenerator = KeyGenerator.getInstance(
            KeyProperties.KEY_ALGORITHM_AES,
            "AndroidKeyStore"
        )

        val keySpec = KeyGenParameterSpec.Builder(
            keyAlias,
            KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT
        )
            .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
            .setKeySize(256)
            .setUserAuthenticationRequired(false) // –ë–µ–∑ –±–∏–æ–º–µ—Ç—Ä–∏–∏!
            .build()

        keyGenerator.init(keySpec)
        keyGenerator.generateKey()
        true
    } catch (e: Exception) {
        println("‚ùå createEncryptionKey failed: ${e.message}")
        false
    }

    /**
     * –ö–ª—é—á –¥–ª—è –î–û–°–¢–£–ü–ê (—Å –±–∏–æ–º–µ—Ç—Ä–∏–µ–π)
     */
    private fun createAccessKey(keyAlias: String): Boolean = try {
        val keyGenerator = KeyGenerator.getInstance(
            KeyProperties.KEY_ALGORITHM_AES,
            "AndroidKeyStore"
        )

        val keySpec = KeyGenParameterSpec.Builder(
            keyAlias,
            KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT
        )
            .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
            .setKeySize(256)
            .setUserAuthenticationRequired(true)
            .setInvalidatedByBiometricEnrollment(true)
            .setUserAuthenticationValidityDurationSeconds(-1)
            .build()

        keyGenerator.init(keySpec)
        keyGenerator.generateKey()
        true
    } catch (e: Exception) {
        println("‚ùå createAccessKey failed: ${e.message}")
        false
    }

    /**
     * –®–∏—Ñ—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á –±–µ–∑ –±–∏–æ–º–µ—Ç—Ä–∏–∏)
     */
    fun encryptContent(plainText: String, notebookKeyAlias: String): String = try {
        val encryptionKeyAlias = "${notebookKeyAlias}_enc" // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á –ë–ï–ó –±–∏–æ–º–µ—Ç—Ä–∏–∏
        val cipher = getCipher().apply {
            init(Cipher.ENCRYPT_MODE, getSecretKey(encryptionKeyAlias))
        }

        val encryptedBytes = cipher.doFinal(plainText.toByteArray())
        val iv = cipher.iv

        "${Base64.encodeToString(iv, Base64.NO_WRAP)}|${Base64.encodeToString(encryptedBytes, Base64.NO_WRAP)}"
    } catch (e: Exception) {
        println("‚ùå encryptContent failed: ${e.message}")
        plainText
    }

    /**
     * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á —Å –±–∏–æ–º–µ—Ç—Ä–∏–µ–π)
     */
    fun decryptContent(encryptedText: String, notebookKeyAlias: String): String {
        println("üîì decryptContent START - key: $notebookKeyAlias")
        return try {
            val accessKeyAlias = "${notebookKeyAlias}_access"
            println("üîì Using access key: $accessKeyAlias")

            val parts = encryptedText.split("|")
            if (parts.size != 2) {
                println("‚ùå Invalid encrypted format")
                return encryptedText
            }

            val iv = Base64.decode(parts[0], Base64.NO_WRAP)
            val encryptedBytes = Base64.decode(parts[1], Base64.NO_WRAP)
            println("üîì IV length: ${iv.size}, encrypted bytes: ${encryptedBytes.size}")

            val cipher = getCipher().apply {
                init(Cipher.DECRYPT_MODE, getSecretKey(accessKeyAlias), IvParameterSpec(iv))
            }

            val decrypted = String(cipher.doFinal(encryptedBytes))
            println("‚úÖ decryptContent SUCCESS: '$decrypted'")
            decrypted

        } catch (e: SecurityException) {
            println("üîì SecurityException: ${e.message}")
            throw e // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏–∏
        } catch (e: Exception) {
            println("‚ùå decryptContent failed: ${e.message}")
            e.printStackTrace() // ‚Üê –í–ê–ñ–ù–û: –ø–æ–∫–∞–∂–µ—Ç –ø–æ–ª–Ω—ã–π stacktrace
            encryptedText
        } finally {
            println("üîì decryptContent END\n")
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç Cipher –¥–ª—è BiometricPrompt (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞)
     */
    fun getCipherForAccess(encryptedText: String, notebookKeyAlias: String): Cipher {
        val accessKeyAlias = "${notebookKeyAlias}_access"
        val parts = encryptedText.split("|")

        if (parts.size != 2) {
            throw IllegalArgumentException("Invalid encrypted format")
        }

        val iv = Base64.decode(parts[0], Base64.NO_WRAP)
        val cipher = getCipher()
        cipher.init(Cipher.DECRYPT_MODE, getSecretKey(accessKeyAlias), IvParameterSpec(iv))

        return cipher
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –±–ª–æ–∫–Ω–æ—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –±–∏–æ–º–µ—Ç—Ä–∏–∏
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞—â–∏—Ç—ã –±–ª–æ–∫–Ω–æ—Ç–∞
     */
    fun createKeyForNotebook(keyAlias: String): Boolean = try {
        if (keyStore.containsAlias(keyAlias)) {
            true // –ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        } else {
            val keyGenerator = KeyGenerator.getInstance(
                KeyProperties.KEY_ALGORITHM_AES,
                "AndroidKeyStore"
            )

            val keySpec = KeyGenParameterSpec.Builder(
                keyAlias,
                KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT
            )
                .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
                .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
                .setKeySize(256)
                .setUserAuthenticationRequired(true)
                .setInvalidatedByBiometricEnrollment(true)
                .setUserAuthenticationValidityDurationSeconds(-1)
                .build()

            keyGenerator.init(keySpec)
            keyGenerator.generateKey()
            true
        }
    } catch (e: Exception) {
        false
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
     * @throws SecurityException –µ—Å–ª–∏ –∫–ª—é—á —Ç—Ä–µ–±—É–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—é
     */
    private fun getSecretKey(keyAlias: String): SecretKey {
        return keyStore.getKey(keyAlias, null) as? SecretKey
            ?: throw SecurityException("Key not found: $keyAlias")
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç Cipher –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å BiometricPrompt
     */
    fun getCipherForDecryption(keyAlias: String): Cipher {
        return getCipher().apply {
            init(Cipher.DECRYPT_MODE, getSecretKey(keyAlias))
        }
    }

    fun keyExists(keyAlias: String): Boolean = keyStore.containsAlias(keyAlias)

    fun deleteKey(keyAlias: String): Boolean = try {
        keyStore.deleteEntry(keyAlias)
        true
    } catch (e: Exception) {
        false
    }

    private fun getCipher(): Cipher = Cipher.getInstance(TRANSFORMATION)
}