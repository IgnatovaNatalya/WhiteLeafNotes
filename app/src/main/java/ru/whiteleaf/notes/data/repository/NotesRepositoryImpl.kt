package ru.whiteleaf.notes.data.repository

import android.content.Context
import android.net.Uri
import android.util.Log
import androidx.core.content.FileProvider
import ru.whiteleaf.notes.common.utils.FileUtils.FILE_NAME_PREFIX
import ru.whiteleaf.notes.data.datasource.FileNoteDataSource
import ru.whiteleaf.notes.domain.model.Note
import ru.whiteleaf.notes.domain.model.Notebook
import ru.whiteleaf.notes.domain.repository.NotesRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.IOException

class NoteRepositoryImpl(
    private val context: Context,
    private val noteDataSource: FileNoteDataSource
) : NotesRepository {

    override suspend fun getNotes(notebookPath: String?): List<Note> {
        println("üìö Repository.getNotes START - notebook: $notebookPath")
        return withContext(Dispatchers.IO) {
            try {
                val dir =
                    notebookPath?.let { File(noteDataSource.baseDir, it) } ?: noteDataSource.baseDir

                val files =
                    noteDataSource.listFilesInDirectory(dir) ?: return@withContext emptyList()

                files.filter { it.isFile && it.name.endsWith(".txt") }
                    .mapNotNull { file ->
                        try {
                            val name = file.nameWithoutExtension
                            println("üìñ Reading note: $name")
                            val content = noteDataSource.readNoteContent(file, notebookPath ?: "")
                            val lastModified = file.lastModified()
                            Note(
                                id = name,
                                title = if (name.startsWith(FILE_NAME_PREFIX)) "" else name,
                                content = content,
                                notebookPath = notebookPath,
                                modifiedAt = lastModified
                            )
                        } catch (e: SecurityException) {
                            // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º SecurityException –¥–∞–ª—å—à–µ
                            println("üîê Repository caught SecurityException: ${e.message}")
                            throw e
                        } catch (e: Exception) {
                            println("‚ùå Repository caught other exception: ${e.message}")
                            null
                        }
                    }
            } catch (e: SecurityException) {
                // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º SecurityException –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏–∏
                println("üîê Repository re-throwing SecurityException to ViewModel")
                throw e
            } catch (e: Exception) {
                println("‚ùå Repository caught exception: ${e.message}")
                throw Exception("Failed to load notes", e)
            } finally {
                println("üìö Repository.getNotes END")
            }
        }
    }

    override suspend fun saveNote(note: Note) {
        withContext(Dispatchers.IO) {
            try {
                val noteFile = noteDataSource.getNoteFile(note.notebookPath ?: "", note.id)
                noteDataSource.writeNoteContent(
                    noteFile, note.content,
                    note.notebookPath.toString()
                )

                if (note.modifiedAt > 0) noteDataSource.setFileLastModified(
                    noteFile,
                    note.modifiedAt
                )

            } catch (e: Exception) {
                Log.e("NoteRepository", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${e.message}")
                throw IOException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${e.message}")
            }
        }
    }

    override suspend fun deleteNote(note: Note) {
        withContext(Dispatchers.IO) {
            try {
                noteDataSource.deleteNote(note.notebookPath ?: "", note.id)
            } catch (e: Exception) {
                Log.e("NoteRepository", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${e.message}")
                throw IOException("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${e.message}")
            }
        }
    }

    override suspend fun moveNote(note: Note, targetNotebookPath: String?) {
        withContext(Dispatchers.IO) {
            try {
                val sourceFile = noteDataSource.getNoteFile(note.notebookPath ?: "", note.id)
                val targetDir = if (targetNotebookPath != null) {
                    File(noteDataSource.baseDir, targetNotebookPath).apply {
                        noteDataSource.createDirectory(this)
                    }
                } else {
                    noteDataSource.baseDir
                }

                val targetFile = File(targetDir, "${note.id}.txt")

                if (sourceFile.exists()) {
                    if (targetFile.exists()) {
                        throw IOException("–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ")
                    }

                    noteDataSource.moveFile(sourceFile, targetFile)
                }
            } catch (e: Exception) {
                throw IOException("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${e.message}")
            }
        }
    }

    override suspend fun renameNote(note: Note, newId: String): String {
        return withContext(Dispatchers.IO) {
            try {
                if (newId == "") {
                    throw IOException("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º noteDataSource –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                if (noteDataSource.existsNote(note.notebookPath ?: "", newId)) {
                    throw IOException("–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ noteDataSource
                val oldFile = noteDataSource.getNoteFile(note.notebookPath ?: "", note.id)
                val newFile = noteDataSource.getNoteFile(note.notebookPath ?: "", newId)

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º noteDataSource –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                if (oldFile.exists()) {
                    noteDataSource.moveFile(oldFile, newFile)
                }
                newId
            } catch (e: Exception) {
                Log.e("NoteRepository", "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${e.message}")
                throw IOException("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ${e.message}")
            }
        }
    }

    override suspend fun shareNoteFile(note: Note): Uri? {
        return withContext(Dispatchers.IO) {
            try {
                val noteFile = noteDataSource.getNoteFile(note.notebookPath ?: "", note.id)
                if (!noteFile.exists()) {
                    return@withContext null
                }

                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è sharing
                val cacheDir = context.cacheDir
                val shareFile = File(cacheDir, "${note.id}.txt")
                noteFile.copyTo(shareFile, overwrite = true)

                // –ü–æ–ª—É—á–∞–µ–º URI —á–µ—Ä–µ–∑ FileProvider
                FileProvider.getUriForFile(
                    context,
                    "${context.packageName}.fileprovider",
                    shareFile
                )
            } catch (_: Exception) {
                null
            }
        }
    }

    override suspend fun getAllNotes(notebooks: List<Notebook>): List<Note> {

        val allNotes = mutableListOf<Note>()

        allNotes.addAll(getNotes(null))
        notebooks.forEach { notebook ->
            allNotes.addAll(getNotes(notebook.path))
        }
        return allNotes
    }

    override suspend fun existsNote(notebookPath: String, noteId: String): Boolean {
        return try {
            noteDataSource.existsNote(notebookPath, noteId)
        } catch (_: Exception) {
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç
            false
        }
    }

    override suspend fun getEncryptedContentSample(notebookPath: String): String? {
        return withContext(Dispatchers.IO) {
            try {
                val directory = if (notebookPath.isNotEmpty()) {
                    File(noteDataSource.baseDir, notebookPath)
                } else {
                    noteDataSource.baseDir
                }

                val files = directory.listFiles { file ->
                    file.isFile && file.name.endsWith(".txt")
                } ?: emptyArray()

                if (files.isNotEmpty()) {
                    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª (–æ–Ω —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω)
                    files.first().readText()
                } else {
                    null
                }
            } catch (e: Exception) {
                null
            }
        }
    }
}